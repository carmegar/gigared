// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  name      String?
  password  String
  role      UserRole @default(TECHNICIAN)
  active    Boolean  @default(true)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relaciones
  assignedTickets Ticket[]
  activityLogs    ActivityLog[]
  
  @@map("users")
}

model Customer {
  id                String   @id @default(cuid())
  name              String
  email             String?  @unique
  phone             String
  address           String
  zoneId            String
  identificationType String
  identification    String   @unique
  createdAt         DateTime @default(now())
  updatedAt         DateTime @updatedAt

  // Relaciones
  zone     Zone      @relation(fields: [zoneId], references: [id])
  services Service[]
  tickets  Ticket[]
  
  @@map("customers")
}

model Zone {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  nequiNumber String
  coverage    String
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  customers Customer[]
  services  Service[]
  
  @@map("zones")
}

model ServicePlan {
  id          String   @id @default(cuid())
  name        String   @unique
  speed       String
  price       Float
  description String?
  active      Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relaciones
  services Service[]
  
  @@map("service_plans")
}

model Service {
  id              String        @id @default(cuid())
  serviceNumber   String        @unique
  customerId      String
  servicePlanId   String
  zoneId          String
  status          ServiceStatus @default(PENDING)
  installationDate DateTime?
  suspensionDate  DateTime?
  ipAddress       String?
  notes           String?
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt

  // Relaciones
  customer    Customer    @relation(fields: [customerId], references: [id])
  servicePlan ServicePlan @relation(fields: [servicePlanId], references: [id])
  zone        Zone        @relation(fields: [zoneId], references: [id])
  tickets     Ticket[]
  inventory   Inventory[]
  
  @@map("services")
}

model Ticket {
  id          String       @id @default(cuid())
  title       String
  description String
  priority    TicketPriority @default(LOW)
  status      TicketStatus @default(PENDING)
  type        TicketType   @default(TECHNICAL)
  customerId  String?
  serviceId   String?
  assignedTo  String?
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  resolvedAt  DateTime?

  // Relaciones
  customer     Customer? @relation(fields: [customerId], references: [id])
  service      Service?  @relation(fields: [serviceId], references: [id])
  assignedUser User?     @relation(fields: [assignedTo], references: [id])
  
  @@map("tickets")
}

model Inventory {
  id          String          @id @default(cuid())
  serialNumber String         @unique
  model       String
  type        InventoryType
  status      InventoryStatus @default(AVAILABLE)
  serviceId   String?
  location    String?
  notes       String?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt

  // Relaciones
  service Service? @relation(fields: [serviceId], references: [id])
  
  @@map("inventory")
}

model Payment {
  id            String        @id @default(cuid())
  amount        Float
  paymentMethod PaymentMethod
  reference     String?
  status        PaymentStatus @default(PENDING)
  description   String?
  customerId    String
  serviceId     String?
  createdAt     DateTime      @default(now())
  updatedAt     DateTime      @updatedAt

  @@map("payments")
}

model ActivityLog {
  id          String   @id @default(cuid())
  action      String
  description String
  userId      String
  entityType  String?
  entityId    String?
  metadata    String?
  createdAt   DateTime @default(now())

  // Relaciones
  user User @relation(fields: [userId], references: [id])
  
  @@map("activity_logs")
}

// Enums
enum UserRole {
  ADMIN
  MANAGER
  TECHNICIAN
  SUPPORT
}

enum ServiceStatus {
  PENDING
  ACTIVE
  SUSPENDED
  CANCELLED
  PREACTIVATED
}

enum TicketStatus {
  PENDING
  IN_PROGRESS
  RESOLVED
  CLOSED
  CANCELLED
}

enum TicketPriority {
  LOW
  MEDIUM
  HIGH
  URGENT
}

enum TicketType {
  TECHNICAL
  BILLING
  INSTALLATION
  SUPPORT
  MAINTENANCE
}

enum InventoryStatus {
  AVAILABLE
  ASSIGNED
  DAMAGED
  MAINTENANCE
}

enum InventoryType {
  ROUTER
  MODEM
  CABLE
  SPLITTER
  CONNECTOR
  OTHER
}

enum PaymentMethod {
  NEQUI
  CASH
  TRANSFER
  CREDIT_CARD
  DEBIT_CARD
}

enum PaymentStatus {
  PENDING
  COMPLETED
  FAILED
  CANCELLED
}
